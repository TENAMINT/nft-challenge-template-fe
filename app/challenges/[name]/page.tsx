/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/N2cpRVYyb5X
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";
import ChallengeCreator from "@/components/ChallengeCreator";
import Form from "@/components/forms/NFTForm";
import { NetworkToggle } from "@/components/network-toggle";
import { Network } from "@mintbase-js/sdk";
import Image from "next/image";
import { useEffect, useState } from "react";

import { useParams, useSearchParams } from "next/navigation";
import { useMbWallet } from "@mintbase-js/react";
import Link from "next/link";
import { NFTChallengeMetaData, NFTContract, RawNFTChallengeMetaData } from "@/types/nft";
import { Account, Connection, Contract, connect } from "near-api-js";
import { set } from "date-fns";

const connectionConfig = {
  networkId: "testnet",
  // keyStore: myKeyStore, // first create a key store
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://testnet.mynearwallet.com/",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://testnet.nearblocks.io",
};
import { Badge } from "@/components/ui/badge";
import { Button } from "../../../components/ui/button";
import { NftMetadata } from "@mintbase-js/data/lib/graphql/codegen/graphql";
import { fetchGraphQl } from "@mintbase-js/data";
import { fetchNftContract, fetchNftContracts } from "@/toolkit/graphql";
import { NFTCarousel } from "@/components/carousel";

export default function NFTChallenge() {
  const [network, setNetwork] = useState<Network>("testnet");
  const [challengeMetaData, setChallengeMetaData] = useState<NFTChallengeMetaData | null>();
  const [rewardNftMetaData, setRewardNftMetaData] = useState<NFTContract | null>();
  const [challengeNfts, setChallengeNfts] = useState<ReadonlyArray<NFTContract>>([]);
  const [isWinner, setIsWinner] = useState<boolean>(false);
  const { isConnected, selector } = useMbWallet();

  const params = useParams<{ name: string }>();
  const errorCode = useSearchParams().get("errorCode");
  const txHashes = useSearchParams().get("txHashes");

  useEffect(() => {
    (async () => {
      const nearConnection = await connect(connectionConfig);

      if (params.name) {
        const contract = new Contract(nearConnection.connection, `${params.name}.supreme-squirrel.testnet`, {
          viewMethods: ["get_challenge_metadata"],
          changeMethods: [],
          useLocalViewExecution: true,
        }) as Contract & {
          get_challenge_metadata: () => Promise<RawNFTChallengeMetaData>;
        };

        const response = await contract.get_challenge_metadata();
        setChallengeMetaData({
          ...response,
          // convert to milliseconds
          terminatesAt: response.terminates_at === Number.MAX_SAFE_INTEGER ? null : response.terminates_at / 1000,
          winnerLimit: response.winner_limit === Number.MAX_SAFE_INTEGER ? null : response.winner_limit,
          winnersCount: response.winners_count,
          challengeNfts: response.challenge_nfts,
          challengeCompleted: response.challenge_completed,
          rewardNft: response.reward_nft,
        });
      }
    })();
  }, []);

  useEffect(() => {
    (async () => {
      if (challengeMetaData) {
        const [rewardNft, challengeNfts] = await Promise.all([
          fetchNftContract(challengeMetaData.rewardNft, network),
          fetchNftContracts(challengeMetaData.challengeNfts, network),
        ]);
        setRewardNftMetaData(rewardNft);
        setChallengeNfts(challengeNfts);
      }
    })();
  }, [challengeMetaData]);

  useEffect(() => {
    (async () => {
      if (isConnected) {
        const wallet = await selector.wallet();
        const accounts = await wallet.getAccounts();

        const nearConnection = await connect(connectionConfig);
        const contract = new Contract(nearConnection.connection, `${params.name}.supreme-squirrel.testnet`, {
          viewMethods: ["check_account_is_winner"],
          changeMethods: [],
          useLocalViewExecution: true,
        }) as Contract & {
          check_account_is_winner: (args: { account_id: string }) => Promise<boolean>;
        };
        const isWinner = await contract.check_account_is_winner({ account_id: accounts[0].accountId });
        setIsWinner(isWinner);
        // fetch the user's NFTs
      } else {
        setIsWinner(false);
        // show a message to connect wallet
      }
    })();
  }, [isConnected]);

  const submitEntry = async () => {
    const wallet = await selector.wallet();

    if (!isConnected) return;

    await wallet.signAndSendTransaction({
      receiverId: `${params.name}.supreme-squirrel.testnet`,
      actions: [
        {
          type: "FunctionCall",
          params: {
            methodName: "initiate_claim",
            args: {},
            gas: "90000000000000",
            deposit: "0",
          },
        },
      ],
      callbackUrl: `${window.location.origin}/challenges/${params.name}`,
    });
  };

  if (!challengeMetaData) return <div>Loading...</div>;

  return (
    <>
      <section className="w-full py-12 md:py-24 lg:py-32">
        <div className="container px-4 md:px-6">
          <div className="grid gap-6 lg:grid-cols-[1fr_500px] lg:gap-12 xl:grid-cols-[1fr_600px]">
            <div className="flex flex-col justify-center space-y-4">
              <div className="space-y-2">
                <h1 className="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
                  {challengeMetaData.title} Challenge
                </h1>
                <p className="max-w-[600px] text-gray-500 md:text-xl dark:text-gray-400">
                  {challengeMetaData.description}
                </p>
              </div>
              <div className="flex flex-col gap-2 min-[400px]:flex-row">
                {isConnected && (
                  <Button variant="default" onClick={() => submitEntry()}>
                    Submit Entry
                  </Button>
                )}
              </div>
              {isWinner ? (
                <p className="text-gray-500 md:text-l dark:text-gray-300 mt-2">
                  Congrats, you&apos;ve completed this challenge!
                </p>
              ) : (
                <p className="text-gray-500 md:text-l dark:text-gray-300 mt-2">
                  Make sure you have all challenge pieces before submitting your entry! Submitting entries cost gas
                  whether you win or not.
                </p>
              )}
              {errorCode && (
                <div className="bg-red-100 text-red-500 p-4 rounded-lg">
                  <p>
                    Unfourtanetly your entry wasn&apos;t accepted.
                    {txHashes && (
                      <p>
                        , you can view the transaction{" "}
                        <a
                          href={`https://testnet.nearblocks.io/txns/${txHashes[0]}`}
                          className="font-medium text-blue-500"
                        >
                          here
                        </a>
                      </p>
                    )}
                    Make sure the challenge isn&apos;t completed and you have all the pieces.
                  </p>
                </div>
              )}
            </div>
            <img
              alt={`${challengeMetaData.title} Challenge media`}
              className="mx-auto aspect-video overflow-hidden rounded-xl object-cover"
              height="400"
              src="https://pbs.twimg.com/media/FmxbeaCaMAYAvKG?format=jpg&name=4096x4096"
              width="600"
            />
          </div>
        </div>
      </section>
      <section className="w-full py-8 md:py-24 lg:py-20 bg-gray-100 dark:bg-gray-800 justify-center">
        <div className="container px-4 md:px-6">
          <div className="grid gap-8 lg:grid-cols-[1fr_1fr] lg:gap-16">
            <div>
              <h2 className="text-2xl font-bold tracking-tighter">Challenge Details</h2>
              <div className="mt-4 space-y-4">
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Termination Date</p>
                  <p className="font-medium">
                    {challengeMetaData.terminatesAt
                      ? new Date(challengeMetaData.terminatesAt).toLocaleString()
                      : "Never ends"}
                  </p>
                </div>
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Challenge Pieces</p>
                  <p className="font-medium">{challengeMetaData.challengeNfts.length}</p>
                </div>
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Winners</p>
                  <p className="font-medium">{challengeMetaData.winnersCount}</p>
                </div>
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Max winners</p>
                  <p className="font-medium">
                    {challengeMetaData.winnerLimit ? challengeMetaData.winnerLimit : "Unlimited Winners"}
                  </p>
                </div>
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Reward NFT</p>
                  <a
                    href={`https://testnet.nearblocks.io/address/${challengeMetaData.rewardNft}`}
                    className="font-medium text-blue-500"
                  >
                    {challengeMetaData.rewardNft}
                  </a>
                </div>
                <div className="flex items-center justify-between">
                  <p className="text-gray-500 dark:text-gray-400">Challenge Status</p>
                  {challengeMetaData.challengeCompleted ? (
                    <Badge variant="secondary">Completed</Badge>
                  ) : (
                    <Badge variant="default">Ongoing</Badge>
                  )}
                </div>
              </div>
            </div>

            {rewardNftMetaData && (
              <div>
                <h2 className="text-2xl font-bold tracking-tighter">About the Reward</h2>
                <div className="mt-4 space-y-4">
                  <div className="flex items-center gap-4">
                    <img
                      alt={`${rewardNftMetaData.name} NFT`}
                      className="rounded-lg"
                      height="100"
                      src={rewardNftMetaData.icon}
                      style={{
                        aspectRatio: "100/100",
                        objectFit: "cover",
                      }}
                      width="100"
                    />
                    <div>
                      <p className="text-lg font-medium">{rewardNftMetaData.name}</p>
                      <p className="text-gray-500 dark:text-gray-400">The reward for the challenge</p>
                    </div>
                  </div>
                  <p className="text-gray-500 dark:text-gray-400">
                    The Pixel Art Genesis NFT is a limited edition piece created specifically for this challenge. It
                    features a one-of-a-kind pixel art design and will be awarded to the top 10 winners.
                  </p>
                </div>
              </div>
            )}
          </div>
          <div className="flex flex-col items-center mt-8">
            <h2 className="text-2xl font-bold tracking-tighter">Challenge fragments</h2>
            <NFTCarousel nfts={challengeNfts} />
          </div>
        </div>
      </section>
    </>
  );
}
