/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/NIRtBytcueJ
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { NFTContract } from "@/types/nft";
import { Progress } from "./ChallengeCreator";
import { Dispatch, SetStateAction, useState } from "react";
import { NftContracts } from "@mintbase-js/data/lib/graphql/codegen/graphql";
import { fetchGraphQl } from "@mintbase-js/data";
import { Checkbox } from "./ui/checkbox";

export function VictoryConditionsForm({
  nft,
  setProgress,
  challengeNfts,
  setChallengeNfts,
  setWinnerCount,
  winnerCount,
}: {
  nft: NFTContract;
  challengeNfts: Array<NFTContract>;
  setProgress: Dispatch<SetStateAction<Progress>>;
  setChallengeNfts: Dispatch<SetStateAction<Array<NFTContract>>>;
  setWinnerCount: Dispatch<SetStateAction<number>>;
  winnerCount: number;
}) {
  const [challengeCount, setChallengeCount] = useState(Math.max(challengeNfts.length, 1));
  const [nftIds, setNftIds] = useState<Array<string>>(challengeNfts.map((nft) => nft.id));

  async function fetchNftContracts() {
    const res: {
      data?: {
        nft_contracts: Array<NFTContract>;
      };
    } = await fetchGraphQl({
      query: `
      query NFTContractsQuery($_in: [String!] = "") {
        nft_contracts(where: {id: {_in: $_in}}) {
          id
          name
          symbol
          icon
        }
      }`,
      variables: { _in: nftIds },
    });
    console.log(res);
    if (res.data?.nft_contracts != null) {
      console.log(res.data, "here");
      setChallengeNfts(res.data?.nft_contracts);
    }
  }

  const onNext = async () => {
    await fetchNftContracts();
  };
  return (
    <div className="mx-auto max-w-md space-y-6">
      <div className="flex flex-col items-start justify-between">
        <h2 className="text-xl font-semibold">Choose your challenge's victory conditions</h2>
        <p className="text-gray-500 dark:text-gray-400">Enter the details for your challenges.</p>
      </div>
      {/* <div className="flex flex-col space-y-1 mt-2">
          <h3>Reward:</h3>
          <img
            alt="NFT Icon"
            className="rounded-md"
            height="80"
            src={nft.icon}
            style={{
              aspectRatio: "80/80",
              objectFit: "cover",
            }}
            width="80"
          />
          <div className="text-lg font-medium">{nft.name}</div>
        </div> */}

      <div className="grid gap-2">
        <Label htmlFor="winners">Quantity of Winners</Label>
        <Select
          onValueChange={(e) => {
            if (e === "limited") {
              setWinnerCount(1);
            } else {
              setWinnerCount(Number.MAX_VALUE);
            }
          }}
          defaultValue="unlimited"
          id="winners"
        >
          <SelectTrigger className="w-full">
            <SelectValue placeholder="Select quantity" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem
              onChange={() => {
                setWinnerCount(Number.MAX_VALUE);
              }}
              value="unlimited"
            >
              Unlimited
            </SelectItem>
            <SelectItem
              onChange={() => {
                setWinnerCount(1);
              }}
              value="limited"
            >
              Limited
            </SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div className={winnerCount === Number.MAX_VALUE ? "hidden" : "grid gap-2"}>
        <Label htmlFor="challenges">Number of Winners</Label>
        <Input
          placeholder="Enter number of winners"
          onChange={(e) => setWinnerCount(parseInt(e.target.value))}
          value={winnerCount}
          type="number"
        />
      </div>
      <div className="grid gap-2">
        <Label htmlFor="challenges">Number of Challenges</Label>
        <Input
          id="challenges"
          placeholder="Enter number of challenges"
          onChange={(e) => setChallengeCount(parseInt(e.target.value) || 0)}
          value={challengeCount}
          type="number"
        />
      </div>
      <div>
        {[...Array(challengeCount).keys()].map((num) => (
          <div className="grid gap-4">
            <div className="text-lg font-medium grid gap-2">Challenge #{num + 1}</div>
            <div className="flex items-center justify-between">
              <Label htmlFor="challenges">NFT ID</Label>
              <div className="flex items-center justify-between">
                <Label className="font-medium mr-3" htmlFor="create-can-end-challenge">
                  Burn piece on claim
                </Label>
                <Checkbox
                  // checked={creatorCanEndChallenge}
                  // onCheckedChange={() => {
                  //   setCreatorCanEndChallenge(!creatorCanEndChallenge);
                  // }}
                  id="create-can-end-challenge"
                />
              </div>
            </div>
            <Input
              value={nftIds[num]}
              onChange={(e) => {
                let nftIdsCopy = [...nftIds];
                nftIdsCopy[num] = e.target.value;
                setNftIds(nftIdsCopy);
              }}
              id="nft-id"
              placeholder="Enter the NFT ID"
            />
          </div>
        ))}
      </div>

      <Button
        className="mr-4 w-auto"
        variant="outline"
        onClick={() => {
          setProgress(Progress.NFTSearch);
        }}
      >
        Previous
      </Button>
      <Button className="w-auto" type="submit" onClick={() => onNext()}>
        Next
      </Button>
    </div>
  );
}
